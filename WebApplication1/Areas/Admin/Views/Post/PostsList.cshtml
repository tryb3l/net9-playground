@using WebApplication1.Helpers
@{
    ViewData["Title"] = "Posts";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Posts</h1>
        <a asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus-circle me-1"></i> Create New
        </a>
    </div>

    <div class="mb-3">
        <div class="btn-group" role="group" aria-label="Status filter">
            <button type="button" class="btn btn-outline-secondary active" data-filter="Active">Active</button>
            <button type="button" class="btn btn-outline-secondary" data-filter="Trashed">Trash</button>
            <button type="button" class="btn btn-outline-secondary" data-filter="All">All</button>
        </div>
    </div>

    <div id="trashActions" class="mb-3">
        <button id="emptyTrashBtn" class="btn btn-danger btn-sm">
            <i class="bi bi-trash3-fill me-1"></i>Empty Trash
        </button>
        <button id="restoreAllBtn" class="btn btn-success btn-sm">
            <i class="bi bi-arrow-counterclockwise me-1"></i>Restore All
        </button>
    </div>


    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table id="postsTable" class="table table-hover align-middle" style="width:100%">
                    <thead class="table-light">
                        <tr>
                            <th>Title</th>
                            <th>Author</th>
                            <th>Created</th>
                            <th>Status</th>
                            <th>Published</th>
                            <th class="text-end no-sort">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var currentFilter = 'Active';
            var table;

            function renderStatus(row) {
                if (row.isDeleted) {
                    return `<span class="badge bg-danger">Trashed</span>`;
                }
                if (row.isPublished) {
                    return `<span class="badge bg-success">Published</span>`;
                }
                return `<span class="badge bg-secondary">Draft</span>`;
            }

            // --- Filter button logic ---
            $('.btn-group button').on('click', function () {
                $('.btn-group button').removeClass('active');
                $(this).addClass('active');
                currentFilter = $(this).data('filter');
                $('#trashActions').toggle(currentFilter === 'Trashed');
                table.ajax.reload();
            });

            // --- DataTable Initialization ---
            table = $('#postsTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: "@Url.Action("GetPostsData", "Post")",
                    type: "POST",
                    dataType: "json",
                    data: function (d) {
                        d.statusFilter = currentFilter;
                        return d;
                    }
                },
                columns: [
                    { data: "title", name: "Title" },
                    { data: "authorName", name: "Author" },
                    { data: "createdAt", name: "Created" },
                    {
                        data: null,
                        name: "Status",
                        orderable: false,
                        render: function (data, type, row) {
                            return renderStatus(row);
                        }
                    },
                    { data: "publishedDate", name: "Published" },
                    { data: null, name: "Actions", orderable: false, searchable: false }
                ],
                order: [[2, "desc"]],
                columnDefs: [
                    { targets: 'no-sort', orderable: false },
                    {
                        targets: -1,
                        className: 'text-end',
                        render: function (data, type, row, meta) {
                            const id = row.id;
                            const isDeleted = row.isDeleted;
                            const isPublished = row.isPublished;
                            const antiforgeryToken = $('input[name="__RequestVerificationToken"]').val();

                            let actionsHtml = `
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton${id}" data-bs-toggle="dropdown" aria-expanded="false">
                                                        Actions
                                                    </button>
                                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton${id}">`;

                            if (isDeleted) {
                                actionsHtml += `
                                                    <li><form action="/Admin/Post/Restore/${id}" method="post" class="d-inline ajax-form"><input type="hidden" name="__RequestVerificationToken" value="${antiforgeryToken}" /><button type="submit" class="dropdown-item"><i class="bi bi-arrow-counterclockwise me-2"></i>Restore</button></form></li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><form action="/Admin/Post/Delete/${id}" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to permanently delete this post?');"><input type="hidden" name="__RequestVerificationToken" value="${antiforgeryToken}" /><button type="submit" class="dropdown-item text-danger"><i class="bi bi-trash-fill me-2"></i>Delete Permanently</button></form></li>`;
                            } else {
                                actionsHtml += `
                                                    <li><a class="dropdown-item" href="/Admin/Post/Edit/${id}"><i class="bi bi-pencil-square me-2"></i>Edit</a></li>
                                                    <li><a class="dropdown-item" href="/Admin/Post/Details/${id}"><i class="bi bi-eye me-2"></i>Details</a></li>
                                                    <li><hr class="dropdown-divider"></li>`;

                                if (isPublished) {
                                    actionsHtml += `<li><form action="/Admin/Post/Unpublish/${id}" method="post" class="d-inline ajax-form"><input type="hidden" name="__RequestVerificationToken" value="${antiforgeryToken}" /><button type="submit" class="dropdown-item"><i class="bi bi-x-circle me-2"></i>Unpublish</button></form></li>`;
                                } else {
                                    actionsHtml += `<li><form action="/Admin/Post/Publish/${id}" method="post" class="d-inline ajax-form"><input type="hidden" name="__RequestVerificationToken" value="${antiforgeryToken}" /><button type="submit" class="dropdown-item"><i class="bi bi-send me-2"></i>Publish</button></form></li>`;
                                }

                                actionsHtml += `
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><form action="/Admin/Post/SoftDelete/${id}" method="post" class="d-inline ajax-form"><input type="hidden" name="__RequestVerificationToken" value="${antiforgeryToken}" /><button type="submit" class="dropdown-item text-warning"><i class="bi bi-trash me-2"></i>Move to Trash</button></form></li>`;
                            }

                            actionsHtml += `</ul></div>`;
                            return actionsHtml;
                        }
                    }
                ]
            });

            $('#postsTable').on('submit', 'form.ajax-form', function (e) {
                e.preventDefault();
                var form = $(this);
                var row = form.closest('tr');
                var isSoftDelete = form.attr('action').includes('SoftDelete');
                var isRestore = form.attr('action').includes('Restore');

                if (isSoftDelete || isRestore) {
                    row.css('opacity', '0.5');
                }

                $.ajax({
                    url: form.attr('action'),
                    type: form.attr('method'),
                    data: form.serialize(),
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message || 'Operation successful!');
                            if ((isSoftDelete && currentFilter === 'Active') || (isRestore && currentFilter === 'Trashed')) {
                                table.row(row).remove().draw(false);
                            } else {
                                table.ajax.reload();
                            }
                        } else {
                            toastr.error(response.message || 'An error occurred.');
                            row.css('opacity', '1');
                        }
                    },
                    error: function (xhr) {
                        toastr.error('A server error occurred. Please try again.');
                        row.css('opacity', '1');
                    }
                });
            });

            $('#emptyTrashBtn').on('click', function () {
                if (confirm('Are you sure you want to permanently delete all posts in the trash? This cannot be undone.')) {
                    $.ajax({
                        url: '@Url.Action("EmptyTrash", "Post")',
                        type: 'POST',
                        data: { '__RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                        success: function (response) {
                            if (response.success) {
                                toastr.success('Trash emptied successfully');
                                table.ajax.reload();
                            } else {
                                toastr.error(response.message || 'An error occurred');
                            }
                        },
                        error: function () { toastr.error('An error occurred. Please try again.'); }
                    });
                }
            });

            $('#restoreAllBtn').on('click', function () {
                if (confirm('Are you sure you want to restore all posts from trash?')) {
                    $.ajax({
                        url: '@Url.Action("RestoreAll", "Post")',
                        type: 'POST',
                        data: { '__RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                        success: function (response) {
                            if (response.success) {
                                toastr.success('All posts restored successfully');
                                table.ajax.reload();
                            } else {
                                toastr.error(response.message || 'An error occurred');
                            }
                        },
                        error: function () { toastr.error('An error occurred. Please try again.'); }
                    });
                }
            });

            $('#trashActions').hide();
            $('body').append(`<input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken().GetRawString()" />`);
        });
    </script>
}